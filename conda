# MKL takes roughly 100MB and some use cases do not need it, so users can opt out of MKL and instead use OpenBLAS for Linux. To opt out, run
conda install nomkl
# and then use conda install to install packages that would normally include MKL or depend on packages that include MKL, such as scipy, numpy, and pandas. Conda will install the non-MKL versions of these packages together with their dependencies.

# To create a py27 environment
conda create --name <name> python=2.7
conda list --revisions
conda install --revision N
where N is the number of the revision

# make space in conda directory
# It removes unused packages from under the pkgs/ directory wherever you happen to have conda installed. An "unused" package is one that's not used in any environment. All conda packages are stored under the pkgs/ directory and then hard-linked (if possible) into the environments.
conda clean --all

# remove conda environment
conda env remove --name envname

# auto enae
If your shell is Bash or a Bourne variant, enable conda for the current user with

    $ echo "[ -f /opt/miniconda3/etc/profile.d/conda.sh ] && source /opt/miniconda3/etc/profile.d/conda.sh" >> ~/.bashrc

or, for all users, enable conda with

    $ sudo ln -s /opt/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh

# see existing conda environments
conda env list

# enable conda and activate virtualenv in single command
source /opt/miniconda3/bin/activate <envname>


# create conda environment from yaml file
conda env create -f environment.yml

# install or update packages into current environment from a yaml file
# the prune flags removes any dependencies not mentioned in the file
conda env update --name myenv --file local.yml --prune


# create the environment file to use with conda
# an example yaml file contents
name: stats2
channels:
  - javascript
dependencies:
  - python=3.9
  - bokeh=2.4.2
  - conda-forge::numpy=1.21.*
  - nodejs=16.13.*
  - flask
  - pip
  - pip:
    - Flask-Testing
    - -r requirements.txt
    - -r makedata/requirements.txt

# use faster conda solver
conda install -n base conda-libmamba-solver
conda config --set solver libmamba

# see which solver is currently used
conda config --show-sources

# revert temporarily to default solver
conda install numpy --solver=classic

# Fix for cryptography ssl issue
export CRYPTOGRAPHY_OPENSSL_NO_LEGACY=1
conda install cryptography

# show available package versions
conda search -f <package_name>

# With this activated shell, install conda’s shell functions for easier access in the future:
conda init

#If you’d prefer that conda’s base environment not be activated on startup, set the auto_activate_base parameter to false:
conda config --set auto_activate_base false

# 
bash ~/miniconda.sh -b -p $HOME/miniconda
-b—Batch mode with no PATH modifications to ~/.bashrc. Assumes that you agree to the license agreement. Does not edit the .bashrc or .bash_profile files.

-p—Installation prefix/path.

-f—Force installation even if the installation prefix/path already exists.


# install ranger with conda
conda install -c conda-forge ranger-fm

# create conda environment from existing
conda list --export > environment.yml


# remove package from conda env
conda remove packagename

# conda upgrade a package
conda update wandb

# create a requirements file from conda env
conda list -e > requirements. txt
